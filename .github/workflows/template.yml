name: CI-CD Pipeline

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment (dev, uat, prod)'
        required: true
        type: string
        default: 'dev'
      aws-region:
        description: 'AWS Region'
        required: false
        type: string
        default: 'ap-southeast-2'

    secrets:
      AWS_ACCESS_KEY_ID:
        description: 'AWS Access Key ID'
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: 'AWS Secret Access Key'
        required: true

jobs:
  # CI Pipeline
  ci-pipeline:
    if: github.ref == 'refs/heads/dev' && github.event_name == 'pull_request'
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws-region }}

      # # Unit Test Backend
      # - name: Setup .NET
      #   uses: actions/setup-dotnet@v3

      # - name: Restore backend dependencies
      #   run: dotnet restore ./backend/YourBackendProject.csproj

      # - name: Build backend
      #   run: dotnet build ./backend/YourBackendProject.csproj --configuration Release --no-restore

      # - name: Run backend unit tests
      #   run: dotnet test ./backend/YourBackendProject.Tests/YourBackendProject.Tests.csproj --no-build --verbosity normal

      # # Unit Test Frontend
      # - name: Setup Node.js
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: '20.x'

      # - name: Install frontend dependencies
      #   run: |
      #     cd frontend
      #     npm install

      # - name: Run frontend unit tests
      #   run: |
      #     cd frontend
      #     npm test -- --watchAll=false --ci

      - name: Terraform Module ECR
        uses: ./.github/actions/terraform_ecr
        with:
          environment: ${{ inputs.environment }}

      - name: Build and Push Frontend Docker Image to ECR
        id: build-frontend-image
        uses: ./.github/actions/ecr
        with:
          ecr-repo: cicd-lab-frontend-repo

      - name: Build and Push Backend Docker Image to ECR
        id: build-backend-image
        uses: ./.github/actions/ecr
        with:
          ecr-repo: cicd-lab-backend-repo
    
    outputs:
      ecr-frontend-image: ${{ steps.build-frontend-image.outputs.image }}
      ecr-backend-image: ${{ steps.build-backend-image.outputs.image }}

  # CD Pipeline 
  cd-pipeline:
    needs: ci-pipeline
    runs-on: ubuntu-22.04
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws-region }}

      - name: Terraform Module ECS Frontend
        uses: ./.github/actions/terraform_ecs
        with:
          environment: ${{ inputs.environment }}

      - name: Deploy Frontend to ECS
        uses: ./.github/actions/ecs
        with:
          image: ${{ needs.ci-pipeline.outputs.ecr-frontend-image }}

      - name: Deploy Backend to ECS
        uses: ./.github/actions/ecs
        with:
          image: ${{ needs.ci-pipeline.outputs.ecr-backend-image }}
          ecs-service: cicd-lab-backend-service
          ecs-cluster: cicd-lab-cluster
          ecs-task-definition: cicd-lab-backend-task
          container-name: backend-container
