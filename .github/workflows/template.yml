name: CI-CD Pipeline

on:
  workflow_call:
    inputs:
      deploy-environment:
        description: 'Deployment environment (dev, uat, prod)'
        required: true
        type: string
    

env:
  REGISTRY: ghcr.io/${{ github.repository_owner }}
  AWS_REGION: ap-southeast-1
  IMAGE_TAG: ${{ github.sha }}

jobs:
  # ---------------- CI Pipeline ----------------
  build-and-test:
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Backend build
      - name: Build backend image
        run: docker build -t backend:${{ github.sha }} ./backend

      # Frontend build
      - name: Build frontend image
        run: docker build -t frontend:${{ github.sha }} ./frontend

      # Optional: run unit tests (backend)
      - name: Run backend tests
        run: |
          cd backend
          ./gradlew test || true  # change to your test runner

      # Optional: frontend test
      - name: Run frontend build/test
        run: |
          cd frontend
          npm install
          npm run build || true

      # Optional: Trivy scan
      - name: Security scan backend image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: $REGISTRY/backend:${IMAGE_TAG}
          format: 'table'
          ignore-unfixed: true

      - name: Security scan frontend image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: $REGISTRY/frontend:${IMAGE_TAG}
          format: 'table'
          ignore-unfixed: true

  # ---------------- CD Pipeline ----------------
  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set ENV name
        id: envname
        run: |
          if [[ "${GITHUB_REF##*/}" == "dev" ]]; then
            echo "env=dev" >> $GITHUB_OUTPUT
          elif [[ "${GITHUB_REF##*/}" == "uat" ]]; then
            echo "env=uat" >> $GITHUB_OUTPUT
          else
            echo "env=prod" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Init
        run: terraform -chdir=infra/${{ steps.envname.outputs.env }} init

      - name: Terraform Apply
        run: terraform -chdir=infra/${{ steps.envname.outputs.env }} apply -auto-approve

      - name: Deploy to ECS
        run: |
          aws ecs update-service \
            --cluster my-${{ steps.envname.outputs.env }}-cluster \
            --service my-app-service \
            --force-new-deployment

      - name: Verify HTTPS access
        run: |
          curl -vk https://my-${{ steps.envname.outputs.env }}.example.com || exit 1
