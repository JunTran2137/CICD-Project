name: 'Terraform Action'
description: 'Reusable GitHub Action for Terraform operations'

inputs:
  environment:
    description: 'Deployment environment'
    required: true

outputs:
  ecs_cluster:
    description: 'ECS Cluster Name'
    value: ${{ steps.apply.outputs.ecs_cluster }}
  ecs_service:
    description: 'ECS Service Name'
    value: ${{ steps.apply.outputs.ecs_service }}
  task_definition:
    description: 'Task Definition Name'
    value: ${{ steps.apply.outputs.task_definition }}

runs:
  using: "composite"
  steps:
    - name: Terraform Init
      run: terraform init -backend-config="key=state/${{ inputs.environment }}/terraform.tfstate"
      shell: bash
      working-directory: './infra'

    - name: Terraform Format
      run: terraform fmt -check
      shell: bash
      working-directory: './infra'

    - name: Download variables file
      run: aws s3 cp s3://dungtt112-tf-backend-bucket/vars/${{ inputs.environment }}/terraform.yaml .
      shell: bash
      working-directory: './infra'

    - name: Terraform Plan
      run: terraform plan -input=false
      shell: bash
      working-directory: './infra'

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false
      shell: bash
      working-directory: './infra'

    - name: Set Outputs
      id: outputs
      run: |
        echo "ecs_cluster=$(terraform output -json ecs_cluster_name | jq -r .ecs_cluster)" >> $GITHUB_OUTPUT
        echo "ecs_service=$(terraform output -json ecs_service_name | jq -r .ecs_service)" >> $GITHUB_OUTPUT
        echo "task_definition=$(terraform output -json task_definition_name | jq -r .task_definition)" >> $GITHUB_OUTPUT
      shell: bash
      working-directory: './infra'
